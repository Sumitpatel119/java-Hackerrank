import java.util.*;

class Student extends Sort{
	private int id;
	private String fname;
	private double cgpa;
	public Student(int id, String fname, double cgpa) {
		super();
		this.id = id;
		this.fname = fname;
		this.cgpa = cgpa;
	}
	public int getId() {
		return id;
	}
	public String getFname() {
		return fname;
	}
	public double getCgpa() {
		return cgpa;
	}
}

//Complete the code
class Sort implements Comparator<Student>{
    public int compare(Student s1,Student s2){
        if(s1.getCgpa()!=s2.getCgpa()){
            Double i1=Double.valueOf(s1.getCgpa());
            Double i2=Double.valueOf(s2.getCgpa());
            return i2.compareTo(i1);
        }
        else if(s1.getFname().equals(s2.getFname())!=true){
            return s1.getFname().compareTo(s2.getFname());
        }
        else{
            Integer a1=Integer.valueOf(s1.getId());
            Integer a2=Integer.valueOf(s2.getId());
            return a1.compareTo(a2);
        }
    }
}
public class Solution extends Sort
{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		
		List<Student> studentList = new ArrayList<Student>();
		while(testCases>0){
			int id = in.nextInt();
			String fname = in.next();
			double cgpa = in.nextDouble();
			
			Student st = new Student(id, fname, cgpa);
			studentList.add(st);
			
			testCases--;
		}
        Comparator comp=new Sort();
        Collections.sort(studentList,comp);
        
      
      	for(Student st: studentList){
			System.out.println(st.getFname());
		}
	}
}



